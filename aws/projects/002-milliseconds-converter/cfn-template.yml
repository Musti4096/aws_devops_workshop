AWSTemplateFormatVersion: 2010-09-09
Description: |
  This is demo template

Parameters:
  VpcId:
    Description: VpcId of my existing Virtual Private Cloud(VPC) 
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: The SubnetIds in our VPC 
    Type: List<AWS::EC2::Subnet::Id>
  InstanceType:
    Description: WebServer EC2 instance type 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t1.micro
      - m1.small
      - m1.medium
      - m1.large
    ConstraintDescription: must be a valid EC2 instance type
  KeyName:
    Description: The EC2 Key Pair allow SSH access to the instance 
    Type: AWS::EC2::KeyPair::KeyName
  PolicyTargetValue:
    Description: Please enter your target value that triggers the AutoScalingGroup  
    Type: String
    Default: '60'

Mappings:
  RegionImageMap:
    us-east-1:
      AMI: ami-0c94855ba95c71c99
    us-east-2:
      AMI: ami-0603cbe34fd08cb81
    us-west-1:
      AMI: ami-0e65ed16c9bf1abc7
    us-west-2:
      AMI: ami-0841edc20334f9287
    eu-west-1:
      AMI: ami-08a2aed6e0a6f9c7d
Resources:
  MyAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs 
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref MyLauchConfiguration
      MaxSize: "3" #required
      MinSize: "1" #required
      TargetGroupARNs:
        - !Ref MyALBTargetGroup
  MyLauchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap  
        - RegionImageMap
        - !Ref AWS::Region
        - AMI 
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref MySecurityGroup
      UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
          DATE_TIME=`date`
          chmod -R 777 /var/www/html
          echo "<html>
          <head>
              <title> Congratulations! You have created an instance from Launch Template</title>
          </head>
          <body>
              <h1>This web server is launched from launch configuration by E2426 Mustafa</h1>
              <p>This instance is created at <b>$DATE_TIME</b></p>
              <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
              <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
          </body>
          </html>" > /var/www/html/index.html
          systemctl start httpd
          systemctl enable httpd
  MyCPUPolicy: #completed
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue : !Ref PolicyTargetValue
  MyAppLoadBalancer: #completed
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !GetAtt MySecurityGroup.GroupId
      Subnets: !Ref Subnets 
  MyALBListener: #completed
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward 
          TargetGroupArn: !Ref MyALBTargetGroup
      LoadBalancerArn: !Ref MyAppLoadBalancer  #required
      Port: 80 #required
      Protocol: HTTP #required
  MyALBTargetGroup: #completed
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP 
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  MySecurityGroup: #completed
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
Outputs:
  URL: 
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt MyAppLoadBalancer.DNSName
