AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer 
  with Auto Scaling Group of Amazon Linux 2 (ami-0947d2ba12ee1ff75) EC2 Instances which host Python Flask Web Application.
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup,
  and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup so that
  Database Server can communicate with Web Servers.
  Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere.
  WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed.
  WebServerLT Launch Template is configured to prepare Python Flask environment on EC2,
  and to deploy Phonebook Application on Flask Server after downloading the app code from Github repository.
Parameters:
  VpcId:
    Description: VpcId of my existing Virtual Private Cloud (VPC) 
    Type: AWS::EC2::VPC::Id
  KeyName:
    Description: The EC2 Key Pair allow SSH access to the instance  
    Type: AWS::EC2::KeyPair::KeyName
  Subnets:
    Description: Choos Subnets
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for Flask Web Server and SSH for entering to EC2 #required
      GroupName: String
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22 
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for Application Load Balancer #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: ami-0947d2ba12ee1ff75
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications: 
          - ResourceType: instance
            Tags:
              - Key: Name 
                Value: !Sub WebServer of ${AWS::StackName} Stack
        UserData:
          Fn::Base64:
            !Sub 
              - | 
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN="xxxxxxxxTOKENxxxxxxxxx"
                FOLDER="https://$TOKEN@raw.githubusercontent.com/Musti4096/aws_devops_workshop/master/aws/projects/004-phonebook-web-application%20-%20Solution2/"
                curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"templates/index.html
                curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L "$FOLDER"templates/add-update.html
                curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L "$FOLDER"templates/delete.html
                curl -s --create-dirs -o "/home/ec2-user/app.py" -L "$FOLDER"phonebook-app.py
                python3 /home/ec2-user/app.py
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address

  WebServerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP 
      TargetType: instance 
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 2
      VpcId: !Ref VpcId 

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        !Ref Subnets 
      Type: application

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer  #required
      Port: 80 #required
      Protocol: HTTP #required
     
  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref WebServerTargetGroup

  MyDBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Front-end access
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
        - EC2SecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId

  MyDatabaseServer:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro #required
      DBInstanceIdentifier: phonebook-app-db2
      DBName: phonebook
      DBSecurityGroups:
        - !Ref MyDBSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUserPassword: Aa123456
      MasterUsername: Mustafa_1
      MultiAZ: false
      Port: 3306
      PubliclyAccessible: true

Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL