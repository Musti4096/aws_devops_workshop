AWSTemplateFormatVersion: 2010-09-09
Description: |
  Cloudformation template for milliseconds converter application. This app runs on application load balancer. In addition, it is observed by Autoscaling Group
  
Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Enable HTTP for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for App from ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        ImageId: ami-0947d2ba12ee1ff75
        InstanceType: t2.micro
        KeyName: serdar
        SecurityGroupIds: 
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} 
        UserData: 
          Fn::Base64:
            !Sub |
              #! /bin/bash
              yum update -y
              yum install python3 -y
              pip3 install flask
              TOKEN="ef581cea771ae3832b9c80ab1476a3b9474ae86a"
              FOLDER="https://$TOKEN@raw.githubusercontent.com/serdarcw/milliseconds_project/master/"
              curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"templates/index.html
              curl -s --create-dirs -o "/home/ec2-user/templates/result.html" -L "$FOLDER"templates/result.html
              curl -s --create-dirs -o "/home/ec2-user/app.py" -L "$FOLDER"app.py
              python3 /home/ec2-user/app.py

  WebServerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !GetAtt WebServerSecurityGroup.VpcId

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - subnet-077c9758
        - subnet-3246e63c
        - subnet-3ccd235a
        - subnet-8d8dbfb3
        - subnet-c41ba589
        - subnet-ed49bccc
      Type: application

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer #required
      Port: 80 #required
      Protocol: HTTP #required

  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref WebServerTargetGroup
    

Outputs:
  WebsiteURL:
    Description: Milliseconds Converter Application Load Balancer URL
    Value: !Sub 
      - http://${ALBaddress}
      - ALBaddress: !GetAtt ApplicationLoadBalancer.DNSName