AWSTemplateFormatVersion: 2010-09-09

Description: >
  This Cloudformation Template deploys Phonebook Application to five Docker Machines on EC2 Instances which are ready for Docker Swarm operations. Docker Machines will run on Amazon Linux 2 with custom security group allowing SSH (22), HTTP (80) UDP (4789, 7946), and TCP(2377, 7946, 8080) connections from anywhere.
  User needs to select appropriate key name when launching the template.

Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must one of the existing EC2 KeyPair

Resources:
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"aws:ResourceTag/project":"202"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  
  EC2InstanceConnect:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
  EC2ConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnect
  DockerMachinesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP for Docker Machines
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  ManagerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: ami-04d29b6f966df1537
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        IamInstanceProfile: 
          Arn: !GetAtt EC2ConnectProfile.Arn
        SecurityGroupIds:
          - !GetAtt DockerMachinesSecurityGroup.GroupId
        UserData:
          Fn::Base64: 
            !Sub |
              #! /bin/bash
              yum update -y
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -a -G docker ec2-user
              curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              yum install python3 -y
              pip3 install ec2instanceconnectcli
              eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
                --region ${AWS::Region} ${DockerManager1} docker swarm join-token manager | grep -i 'docker')"
              # uninstall aws cli version 1
              rm -rf /bin/aws
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              yum install amazon-ecr-credential-helper -y
              mkdir -p /home/ec2-user/.docker
              cd /home/ec2-user/.docker
              echo '{"credsStore": "ecr-login"}' > config.json
  WorkerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: ami-04d29b6f966df1537
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        IamInstanceProfile: 
          Arn: !GetAtt EC2ConnectProfile.Arn
        SecurityGroupIds:
          - !GetAtt DockerMachinesSecurityGroup.GroupId
        UserData:
          Fn::Base64: 
            !Sub |
              #! /bin/bash
              yum update -y
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -a -G docker ec2-user
              curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              yum install python3 -y
              pip3 install ec2instanceconnectcli
              eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
                --region ${AWS::Region} ${DockerManager1} docker swarm join-token worker | grep -i 'docker')"
              # uninstall aws cli version 1
              rm -rf /bin/aws
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              yum install amazon-ecr-credential-helper -y
              mkdir -p /home/ec2-user/.docker
              cd /home/ec2-user/.docker
              echo '{"credsStore": "ecr-login"}' > config.json
  DockerManager1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04d29b6f966df1537
      InstanceType: t2.medium
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        - Key: Name
          Value: !Sub Docker Manager 1st of ${AWS::StackName}                      
        - Key: server
          Value: docker-grand-master
        - Key: project
          Value: "202"
      UserData: 
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          hostnamectl set-hostname Grand-Master
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker swarm init
          yum install git -y
          docker service create \
            --name=viz \
            --publish=8080:8080/tcp \
            --constraint=node.role==manager \
            --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
            dockersamples/visualizer
          # uninstall aws cli version 1
          rm -rf /bin/aws
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json
  DockerManager2:
    Type: AWS::EC2::Instance
    DependsOn:
      - DockerManager1
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref ManagerLT
        Version: !GetAtt ManagerLT.LatestVersionNumber 
      Tags:                
        - Key: server
          Value: docker-manager-2                       
        - Key: Name
          Value: !Sub Docker Manager 2nd of ${AWS::StackName}
        - Key: project
          Value: "202"
  DockerManager3:
    Type: AWS::EC2::Instance
    DependsOn:
      - DockerManager2
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref ManagerLT
        Version: !GetAtt ManagerLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-manager-3                        
        - Key: Name
          Value: !Sub Docker Manager 3rd of ${AWS::StackName}
        - Key: project
          Value: "202"
  DockerWorker1:
    Type: AWS::EC2::Instance
    DependsOn:
      - DockerManager2
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WorkerLT
        Version: !GetAtt WorkerLT.LatestVersionNumber
      Tags:                
        - Key: server
          Value: docker-worker-1                       
        - Key: Name
          Value: !Sub Docker Worker 1st of ${AWS::StackName}
        - Key: project
          Value: "202"
  DockerWorker2:
    Type: AWS::EC2::Instance
    DependsOn:
      - DockerWorker1
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WorkerLT
        Version: !GetAtt WorkerLT.LatestVersionNumber 
      Tags:                
        - Key: server
          Value: docker-worker-2                       
        - Key: Name
          Value: !Sub Docker Worker 2nd of ${AWS::StackName}
        - Key: project
          Value: "202" 
Outputs:
  1stDockerManagerDashboard:
    Description: Dashboard for Docker Swarm
    Value: !Sub 
      - http://${PublicAddress}:8080
      - PublicAddress: !GetAtt DockerManager1.PublicDnsName
  1stDockerManagerDNSName:
    Description: Docker Manager 1st DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerManager1.PublicDnsName
  2ndDockerManagerDNSName:
    Description: Docker Manager 2nd DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerManager2.PublicDnsName
  3rdDockerManagerDNSName:
    Description: Docker Manager 3rd DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerManager3.PublicDnsName
  1stDockerWorkerDNSName:
    Description: Docker Worker 1st DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerWorker1.PublicDnsName
  2ndDockerWorkerDNSName:
    Description: Docker Worker 2nd DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerWorker2.PublicDnsName
  
  